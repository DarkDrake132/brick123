#include "PlayGround.h"
#include"Racket.h"
#include"Ball.h"
#include"Item.h"
#include"Brick.h"
#include"ArrayBrick.h"
#include<stdlib.h>
#include<time.h>
#include<random>
#include<math.h>
#include<MMsystem.h>
#include<Windows.h>
#include<dos.h>
#include<map>
#include<vector>
#include<iomanip>
#pragma warning(disable:4996)

#define Column 6 //cột
#define Row 1   //hàng
bool HasEnd = false;

// window size and update rate (60 fps)
int width = 1000;
int height = 500;
int interval = 1000 / 60;

int level = 4;
int dem = 0;

// score
int score_left = 0;
int score_right = 0;
//int score = 18;
int ScoreOfPlayer = 0;
string Name;

struct SCORE
{
	string name;
	int score;
};
vector<SCORE> Score;
vector<SCORE> TempScore;
SCORE Temp[5];

vector<SCORE> BXH;

/*Khởi tạo các object*/
Racket racket1;
Racket racket2;
Racket racket_1_character;
Ball ball;
Enermy enermy;
Item item;
Brick brick1[Row][Column];
Brick brick2[Row][Column];
Brick brick3[Row][Column];
Brick brick4[Row][Column];


//ArrayBrick *a = new ArrayBrick(Row, Column);
//Brick** brick = a->GetArr();


void enable2D(int width, int height) {
	glViewport(0, 0, width, height);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(0.0f, width, 0.0f, height, 0.0f, 1.0f);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
}


/*in văn bản ra màn hình*/
void drawText(float x, float y, std::string text) {
	glRasterPos2f(x, y);
	glutBitmapString(GLUT_BITMAP_8_BY_13, (const unsigned char*)text.c_str());
	glColor3f(1.0f, 0.0f, 0.0f);
}

/*Đổi số nguyên thành ký tự và giữ nguyên giá trị*/
std::string int2str(int x) {
	// converts int to string
	std::stringstream ss;
	ss << x;
	return ss.str();
}

void draw() {
	// clear (has to be done at the beginning)
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();

	//// ToDo: draw our scene

	/// draw ball
	//ball.drawRect(ball.get_ball_pos_x() - ball.get_ball_size() / 2, ball.get_ball_pos_y() - ball.get_ball_size() / 2, ball.get_ball_size(), ball.get_ball_size());
	//// draw ball (easy version, but not entirely centered)
	ball.drawRect(ball.get_ball_pos_x(), ball.get_ball_pos_y(), ball.get_ball_size(), ball.get_ball_size());

	//// draw rackets
	racket1.drawRect(racket1.get_racket_left_x(), racket1.get_racket_left_y(), racket1.get_racket_width(), racket1.get_racket_height());
	racket2.drawRect(racket2.get_racket_right_x(), racket2.get_racket_right_y(), racket2.get_racket_width(), racket1.get_racket_height());

	//draw item
	//item.drawCircle(400, 150);
	item.drawRect(item.get_item_pos_x(), item.get_item_pos_y(), item.get_item_size(), item.get_item_size());

	// draw score
	drawText(width / 2 - 30, height - 30, int2str(score_left) + ":" + int2str(score_right));
	drawText(30, height - 30, "SPACE: PAUSE");
	drawText(30, height - 50, "ENTER: CONTINUE");
	drawText(width - 140, height - 30, "ESC   : STOP");
	drawText(width - 140, height - 50, "F1   : RESULT");

	if (GetAsyncKeyState(VK_F1))   //Nhấn nút F1 để xuất kết quả
	{
		system("pause");
		if (score_left > score_right)
		{
			drawText(width / 2 - 70, height / 2, "LEFT PLAYER WIN!");
		}
		else if (score_left > score_right)
		{
			drawText(width / 2 - 70, height / 2, "RIGHT PLAYER WIN!");
		}
	}

	//draw Enermy
	enermy.drawRect(enermy.get_enermy_pos_x(), enermy.get_enermy_pos_y(), enermy.get_enermy_width(), enermy.get_enermy_height());
	//ball.updateBall(racket1, racket2, score_left, score_right, enermy);


	// swap buffers (has to be done at the end)
	glutSwapBuffers();
}


void update(int value) {
	// input handling
	racket1.keyboard1();
	racket2.keyboard2();

	// update ball
	ball.updateBall(racket1, racket2, score_left, score_right, enermy, item);

	if (GetAsyncKeyState(VK_SPACE))    //nhấp nút SPACE để tạm dừng, nhấn Enter để tiếp tục
	{
		system("pause");
	}

	if (GetAsyncKeyState(VK_ESCAPE))    //nhấp nút SPACE để tạm dừng, nhấn Enter để tiếp tục
	{
		exit(0);
	}

	// Call update() again in 'interval' milliseconds
	glutTimerFunc(interval, update, 0);

	// Redisplay frame
	glutPostRedisplay();
}


bool WinOrLose(Brick brick[Row][Column])
{
	int dem = 0;
	for (int i = 0; i < Row; i++)
	{
		for (int j = 0; j < Column; j++)
		{
			if (brick[i][j].get_exist() == 1)
			{
				dem++;
			}
		}
	}
	if (dem == 0)
	{
		return true;
	}
	else
	{
		return false;
	}
}

void GetMeTheList()
{
	//Tạo trước cái file để tranh lỗi
	//từng dòng có định dạng như sau:
	//
	//Doan Xuan Bach:13
	//Nguyen Thuy Duong:12

	//map<string, int> BXH;
	
	BXH.clear();

	freopen("BXH.txt", "rt", stdin);
	while (!cin.eof())
	{
		string Name;
		int point;
		cin.ignore();
		getline(cin, name, '-');
		cin >> point;
		SCORE temp;
		temp.name = Name;
		temp
	}
	cin.clear();
	freopen("CON", "rt", stdin);

	//cái map này là để chạy theo từng phần tử của BXH, tức là map là ta không thể tóm được phần tử mà phải nhờ đến 1 thằng phụ
	//map<string, int>::iterator Print;

	cout << setw(76) << "BANG XEP HANG THANH TICH\n";
	cout << setw(75) << "***********************\n";
	for (int i = 0; i < BXH.size(); i++)
	{
		//if (Print->first == "")
		//{
		//	continue;
		//}
		//Vẽ vời gì đó để in cái này ra màn hình game
		cout << setw(50)<<"*"<<setw(12)<< BXH[i].name << " : " << BXH[i].score <<setw(10)<<"*"<< endl;
		//drawText(width / 2 - 70, height / 2, BXH[i].name + " : " + int2str(BXH[i].score));
	}
	cout << setw(75) << "***********************\n";
}

void UpdateBXH()
{
	int Score = ScoreOfPlayer;
	
	BXH.clear();
	
	freopen("BXH.txt", "rt", stdin);
	while (!cin.eof())
	{
		string Name;
		int point;
		cin.ignore();
		getline(cin, name, '-');
		cin >> point;
		SCORE temp;
		temp.name = Name;
		temp.score = point;
		BXH.push_back(temp);
	}
	cin.clear();
	freopen("CON", "rt", stdin);
	
	SCORE temp;
	temp.name = Name;
	temp.score = Score;
	
	if(BXH.size() == 0)
	{
		BXH.push_back(temp);
	}
	else
	{
		int i = 0;
		for(i = 0; i < BXH.size(); i++)
		{
			if(Score < BXH[i].score)
			{
				BXH.insert(i, temp);
				break;
			}
		}
		
		if(i == BXH.size())
		{
			BXH.push_back(temp);
		}
		
		if(BXH.size() > 5)
		{
			BXH.pop_back();//Duy trì file luôn chỉ có 5 phần tử.
		}
	}
	
	//Xong update in ra lại file
	freopen("BXH.txt", "wt", stdout);
	for (int i = 0; i < BXH.size(); i++)
	{
		cout << BXH[i].name << "-" << BXH[i].score << endl;
	}
	freopen("CON", "wt", stdout);
}

void draw1() {

	// clear (has to be done at the beginning)
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();

	//draw racket
	int w = 150;  //Độ rộng thanh ngang
	int h = 10;   //Độ dày thanh ngang
	racket_1_character.set_racket_width(w);
	racket_1_character.set_racket_height(h);
	racket_1_character.drawRect(racket_1_character.get_racket_x(), racket_1_character.get_racket_y(), racket_1_character.get_racket_width(), racket_1_character.get_racket_height());

	//draw ball
	//float y = racket_1_character.get_racket_height() ;
	//ball.set_ball_pos_y(y);
	ball.drawRect(ball.get_ball_pos_x(), ball.get_ball_pos_y(), ball.get_ball_size(), ball.get_ball_size());

	drawText(20, height - 30, "SPACE: RESUME");
	drawText(width - 110, height - 30, "F1: PAUSE");
	drawText(width - 110, height - 50, Name);
	drawText(20, height - 50, "ESC: STOP");
	drawText(width / 2 - 30, height - 30, int2str(ScoreOfPlayer));


	//draw brick
	//brick.drawRect(20, 460, 150, 20);
	if (level == 1)
	{

		int i, j;
		int x, y;
		x = 20;
		y = 420;
		for (i = 0; i < Row; i++)
		{
			for (j = 0; j < Column; j++)
			{
				brick1[i][j].drawRect(x, y, brick1[i][j].get_brick_width(), brick1[i][j].get_brick_height());
				brick1[i][j].set_brick_pos_x(x);
				brick1[i][j].set_brick_pos_y(y);
				x += 160;
			}
			y -= 30;
			x = 20;
		}

		if (WinOrLose(brick1) == true)
		{
			level = 2;
		}
	}
	//cout << level << endl;

	if (level == 2)
	{
		ball.drawRect(ball.get_ball_pos_x(), ball.get_ball_pos_y(), ball.get_ball_size(), ball.get_ball_size());
		int i, j;
		int x, y;
		x = 20;
		y = 420;
		for (i = 0; i < Row; i++)
		{
			for (j = 0; j < Column; j++)
			{
				brick2[i][j].drawRect(x, y, brick2[i][j].get_brick_width(), brick2[i][j].get_brick_height());
				brick2[i][j].set_brick_pos_x(x);
				brick2[i][j].set_brick_pos_y(y);
				x += 160;
			}
			y -= 30;
			x = 20;
		}

		if (WinOrLose(brick2) == true)
		{

			level = 3;
		}
	}

	if (level == 3)
	{
		int i, j;
		int x, y;
		x = 20;
		y = 420;
		for (i = 0; i < Row; i++)
		{
			for (j = 0; j < Column; j++)
			{
				brick3[i][j].drawRect(x, y, brick3[i][j].get_brick_width(), brick3[i][j].get_brick_height());
				brick3[i][j].set_brick_pos_x(x);
				brick3[i][j].set_brick_pos_y(y);
				x += 160;
			}
			y -= 30;
			x = 20;
		}
		if (WinOrLose(brick3) == true)
		{
			level = 4;
		}
	}

	if (level == 4)
	{

		int i, j;
		int x, y;
		x = 20;
		y = 420;
		for (i = 0; i < Row; i++)
		{
			for (j = 0; j < Column; j++)
			{
				brick4[i][j].drawRect(x, y, brick4[i][j].get_brick_width(), brick4[i][j].get_brick_height());
				brick4[i][j].set_brick_pos_x(x);
				brick4[i][j].set_brick_pos_y(y);
				x += 160;
			}
			y -= 30;
			x = 20;
		}
		if (WinOrLose(brick4) == true)
		{
			racket_1_character.setPlayerWin();
			level = 5;
			racket_1_character.setPlayerWin();

			/*freopen("BXH.txt", "at", stdout);
			cout << Name << "-" << ScoreOfPlayer << endl;
			freopen("CON", "at", stdout);
			cin.clear();
			return;*/

			/*	freopen("TempBXH.txt", "wt", stdout);
				cout << Name << "-" << ScoreOfPlayer << endl;
				freopen("CON", "wt", stdout);
				cin.clear();

				string n;
				int s;
				freopen("TempBXH.txt", "rt", stdin);
				getline(cin, n, '-');
				cin >> s;
				freopen("CON", "rt", stdin);
				cin.clear();

				freopen("BXH.txt", "at", stdout);
				cout << n << "-" << s << endl;
				freopen("CON", "at", stdout);
				cin.clear();*/
		}
		//drawText(width / 2 - 70, height / 2, "PLAYER WIN!");
	}

	if (level == 5)
	{
		/*freopen("BXH.txt", "at", stdout);
		cout << Name << "-" << ScoreOfPlayer << endl;
		freopen("CON", "at", stdout);
		cin.clear();

		freopen("BXH.txt", "rt", stdin);
		while (!cin.eof())
		{
			string a;
			int b;
			getline(cin, a, '-');
			if (a[0] == '\n')
			{
				a.erase(0, 1);
			}
			cin >> b;
			SCORE temp;
			temp.name = a;
			temp.score = b;
			Score.push_back(temp);
		}
		freopen("CON", "rt", stdin);
		cin.clear();*/

		//TempScore.push_back(Score[0]);
		//for (int i = 1; i < Score.size(); i++)
		//{
		//	if (Score[i].name != Score[i - 1].name)
		//	{
		//		TempScore.push_back(Score[i]);
		//	}
		//}
		////SapXepGiamDan(TempScore);
		//for (int i = 0; i < TempScore.size() - 1; i++)
		//{
		//	int min = i;
		//	for (int j = 0; j < TempScore.size(); j++)
		//	{
		//		if (TempScore[j].score < TempScore[min].score)
		//		{
		//			min = j;
		//		}
		//	}
		//	Swap(TempScore[i], TempScore[min]);
		//}

		/*drawText(width / 2 - 70, height / 2, Temp[0].name + " : " + int2str(Temp[0].score));
		drawText(width / 2 - 70, height / 2 - 20, Temp[1].name + " : " + int2str(Temp[1].score));
		drawText(width / 2 - 70, height / 2 - 40, Temp[2].name + " : " + int2str(Temp[2].score));
		drawText(width / 2 - 70, height / 2 - 60, Temp[3].name + " : " + int2str(Temp[3].score));
		drawText(width / 2 - 70, height / 2 - 80, Temp[4].name + " : " + int2str(Temp[4].score));*/

		/*drawText(width / 2 - 70, height / 2, TempScore[0].name + " : " + int2str(TempScore[0].score));
		drawText(width / 2 - 70, height / 2 - 20, TempScore[1].name + " : " + int2str(TempScore[1].score));
		drawText(width / 2 - 70, height / 2 - 40, TempScore[2].name + " : " + int2str(TempScore[2].score));
		drawText(width / 2 - 70, height / 2 - 60, TempScore[3].name + " : " + int2str(TempScore[3].score));
		drawText(width / 2 - 70, height / 2 - 80, TempScore[4].name + " : " + int2str(TempScore[4].score));
		_getch();*/

		if (racket_1_character.getPlayerWin() == true && WinOrLose(brick4) == true)
		{
			if(HasEnd == false)
			{
				HasEnd == true;
				UpdateBXH();
			}

			drawText(width / 2 - 70, height / 2, "PLAYER WIN!");
		}
		if (racket_1_character.getPlayerWin() == false)
		{
			if(HasEnd == false)
			{
				HasEnd == true;
				UpdateBXH();
			}

			drawText(width / 2 - 70, height / 2, "PLAYER LOSE!");
		}
		//drawText(width / 2 - 70, height / 2,"Nguoi choi: " + Name + " - " + int2str(ScoreOfPlayer));

	}

	//draw enermy
	if (level == 3 || level == 4)
	{
		enermy.set_enermy_width(150);
		enermy.set_enermy_height(20);
		float pos_y = 330;
		enermy.set_enermy_pos_y(pos_y);
		enermy.drawRect(enermy.get_enermy_pos_x(), enermy.get_enermy_pos_y(), enermy.get_enermy_width(), enermy.get_enermy_height());
	}


	// swap buffers (has to be done at the end)
	glutSwapBuffers();
}



void update1(int value) {


	racket_1_character.keyboardfor1character();

	ball.updateBallfor1character(racket_1_character, enermy, level, Name, ScoreOfPlayer);


	int i, j;
	if (level == 1)
	{
		for (i = 0; i < Row; i++)
		{
			for (j = 0; j < Column; j++)
			{
				brick1[i][j].updateBrick(ball, level, ScoreOfPlayer);
			}
		}
	}
	if (level == 2)
	{
		for (i = 0; i < Row; i++)
		{
			for (j = 0; j < Column; j++)
			{
				brick2[i][j].updateBrick(ball, level, ScoreOfPlayer);
			}
		}
	}
	if (level == 3)
	{
		for (i = 0; i < Row; i++)
		{
			for (j = 0; j < Column; j++)
			{
				brick3[i][j].updateBrick(ball, level, ScoreOfPlayer);
			}
		}
	}
	if (level == 4)
	{
		for (i = 0; i < Row; i++)
		{
			for (j = 0; j < Column; j++)
			{
				brick4[i][j].updateBrick(ball, level, ScoreOfPlayer);
			}
		}
	}
	if (level == 5)
	{
		racket_1_character.~Racket();
		ball.~Ball();
	}
	if (GetAsyncKeyState(VK_F1))
	{
		system("pause");
		//_getch();
	}
	if (GetAsyncKeyState(VK_ESCAPE))
	{
		exit(0);
	}
	

	// Call update() again in 'interval' milliseconds
	glutTimerFunc(interval, update1, 0);

	// Redisplay frame
	glutPostRedisplay();
}



// program entry point
int main(int argc, char** argv)
{
	//PlaySound(TEXT("ChooseAChocobo-V.A-3316579.wav"), NULL, SND_ASYNC);
	int lc = 0;
	while (1)
	{
		cout << "\nChon chuc nang: ";
		cout << "\n  0:Xem BXH 1 nguoi choi";
		cout << "\n  1:Choi game";
		cout << "\n  2:Thoat";
		cout << "\n  Chuc nang: ";
		cin >> lc;
		if (lc == 0)
		{
			
			GetMeTheList();
		
		}
		if (lc == 1)  //Bắt đầu chơi game và vẽ trên console
		{
			cout << "0. Thoat/1. 1 nguoi choi/2. 2 nguoi choi\n";
			int nguoichoi;
			cin >> nguoichoi;
			if (nguoichoi == 2)
			{
				// initialize opengl (via glut)
				glutInit(&argc, argv);
				glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
				glutInitWindowSize(width, height);
				glutCreateWindow("2 NGUOI CHOI!");

				// Register callback functions  
				glutDisplayFunc(draw);
				glutTimerFunc(interval, update, 0);

				// setup scene to 2d mode and set draw color to white
				enable2D(width, height);
				glColor3f(1.0f, 1.0f, 1.0f);  //chỉnh màu nền

				// start the whole thing
				glutMainLoop();
			}

			if (nguoichoi == 1)
			{
				cout << "Nhap ten nguoi choi:";
				cin.ignore();
				getline(cin, Name);
				while (level >= 1 && level <= 4)
				{
					//initialize opengl (via glut)

					glutInit(&argc, argv);
					glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
					glutInitWindowSize(width, height);
					glutCreateWindow("1 NGUOI CHOI!");
					// Register callback functions 

					glutDisplayFunc(draw1);
					glutTimerFunc(interval, update1, 0);

					// setup scene to 2d mode and set draw color to white
					enable2D(width, height);
					//glColor3f(1.0f, 1.0f, 1.0f);  //chỉnh màu nền

					// start the whole thing
					glutMainLoop();

				}
			}
		}
		if (lc == 2)
		{
			cout << "Cam on ban da choi";
			break;
		}
	}

	return 0;
}


